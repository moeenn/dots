#!/usr/bin/python3

"""
Simple C Build
Allow quickly building c program with Makefile or any other configuration    
"""

import os
import sys
import subprocess

COMPILER: str = "clang"
DEFAULT_FLAGS: list[str] = ["-std=c99", "-pipe", "-Wno-unused",
                            "-Wall", "-Wno-deprecated-declarations", "-lm"]

LIB_FLAGS: dict[str, str] = {
    "pthread.h": "-pthread",
    "raylib.h": "-lraylib",
}


def list_code_files(path: str = ".") -> list[str]:
    files = os.listdir(path)
    return [os.path.join(path, file) for file in files if file.endswith(".h") or file.endswith(".c")]


def identify_lib_flag(line: str) -> str | None:
    if not line.startswith("#include"):
        return None

    for (key, value) in LIB_FLAGS.items():
        if key in line:
            return value

    return None


def scan_flag_libs(files: list[str]) -> set[str]:
    result: set[str] = set()
    for filepath in files:
        with open(filepath, "rt") as f:
            for line in f:
                flag = identify_lib_flag(line)
                if flag:
                    result.add(flag)

    return result


def generate_compile_command(files: list[str], flags: set[str], bin_name: str) -> str:
    c_files = [file for file in files if file.endswith(".c")]
    args: list[str] = [COMPILER] + c_files + \
        ["-o", bin_name] + DEFAULT_FLAGS + list(flags)
    return " ".join(args)


def main() -> None:
    files = list_code_files("./")
    if len(files) == 0:
        print("No code files found in the current directory", file=sys.stderr)
        exit(1)

    flags = scan_flag_libs(files)
    bin_name = "app.bin"
    command = generate_compile_command(files, flags, bin_name)
    print(command)
    subprocess.Popen(command, shell=True)


if __name__ == "__main__":
    main()


"""

TODO:
- accept command line args
- allow quick run
- allow compile to current directory (auto detect folder name)
- detect system tmp directory

"""
