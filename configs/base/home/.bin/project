#! /usr/bin/python3

from abc import ABC, abstractmethod
import os
import argparse
import subprocess


class BaseTemplate(ABC):
    """
    abstract class which will be inherited by all template classes.
    """

    project_name: str
    project_dir: str
    files_and_content: dict[str, str]

    def __init__(self, project_name: str) -> None:
        self.project_name = project_name
        self.project_dir = os.path.join(os.getcwd(), project_name)

    def execute(self) -> None:
        self.create_dir(self.project_dir)
        self.__write_gitignore()
        self.__create_project_dirs()

        for file_path, content in self.files_and_content.items():
            self.write_file(os.path.join(self.project_dir, file_path), content)

        # initialize git repo.
        cmd = ["git", "init"]
        subprocess.run(cmd, cwd=self.project_dir)

    def create_dir(self, dir_path: str) -> None:
        if os.path.exists(dir_path):
            raise Exception(f"directory already exists: {dir_path}")
        else:
            os.makedirs(dir_path)

    def write_file(self, file_path: str, content: str) -> None:
        if os.path.exists(file_path):
            raise Exception(f"file already exists: {file_path}")
        else:
            with open(file_path, "w") as f:
                f.write(content)

    @staticmethod
    @abstractmethod
    def template_name() -> str:
        pass

    @abstractmethod
    def gitignore_entries(self) -> list[str]:
        pass

    @abstractmethod
    def project_directories(self) -> list[str]:
        pass

    def __create_project_dirs(self) -> None:
        for dir in self.project_directories():
            self.create_dir(os.path.join(self.project_dir, dir))

    def __write_gitignore(self) -> None:
        entries = self.gitignore_entries()
        content = "\n".join(entries)
        self.write_file(os.path.join(self.project_dir, ".gitignore"), content)


class GoTemplate(BaseTemplate):
    """
    template class for go projects.
    """

    def __init__(self, project_name: str) -> None:
        super().__init__(project_name)

        main_go_path = os.path.join("cmd", self.project_name, "main.go")
        self.files_and_content = {
            main_go_path: self.main_go_content(),
            "Makefile": self.makefile_content(),
            ".golangci.yml": self.golangci_lint_content(),
        }

    @staticmethod
    def template_name() -> str:
        return "go"

    def gitignore_entries(self) -> list[str]:
        return ["bin"]

    def project_directories(self) -> list[str]:
        return [
            os.path.join("cmd", self.project_name),
        ]

    def execute(self) -> None:
        super().execute()

        # init go module.
        cmd = ["go", "mod", "init", self.project_name]
        subprocess.run(cmd, cwd=self.project_dir)

        # make tools script executable.
        subprocess.run(["chmod", "+x", "scripts/tools.sh"], cwd=self.project_dir)

    def main_go_content(self) -> str:
        return """package main

import (
    "fmt"
    "os"
)

func run() error {
    fmt.Println("hello world")
    return nil
}

func main() {
    if err := run(); err != nil {
        fmt.Fprintf(os.Stderr, "error: %s\\n", err.Error())
        os.Exit(1)
    }  
}
""".strip()

    def golangci_lint_content(self) -> str:
        return """
version: "2"

linters:
  enable:
    - exhaustive
    - exhaustruct
    - gosec
    - nilnil
    - nilerr
    - contextcheck
    - gochecknoinits
    - godox
    - misspell
    - sloglint

  settings:
    sloglint:
      no-mixed-args: true
      static-msg: true
      key-naming-case: camel
      args-on-sep-lines: true
""".strip()

    def makefile_content(self) -> str:
        return f"""
PROJECT = {self.project_name}
MAIN_FILE = ./cmd/$(PROJECT)/main.go

lint:
	golangci-lint run ./...

test:
	go test ./...

run: lint
	go run $(MAIN_FILE)

build: lint test
	go build -o ./bin/$(PROJECT) $(MAIN_FILE)
	
.PHONY: lint test run
  """.strip()


class JsTemplate(BaseTemplate):
    """
    template class for Javascript projects.
    """

    def __init__(self, project_name: str) -> None:
        super().__init__(project_name)

        index_path = os.path.join("src", "index.mjs")
        index_test_path = os.path.join("src", "index.test.mjs")

        self.files_and_content = {
            "README.md": self.readme_content(),
            index_path: self.index_content(),
            index_test_path: self.index_test_content(),
            "jsconfig.json": self.jsconfig_content(),
            "package.json": self.package_json_content(),
            "eslint.config.js": self.eslint_config_content(),
        }

    @staticmethod
    def template_name() -> str:
        return "js"

    def gitignore_entries(self) -> list[str]:
        return ["node_modules/", ".DS_Store"]

    def project_directories(self) -> list[str]:
        return ["src"]

    def execute(self) -> None:
        super().execute()

        # install npm dependencies.
        cmd = ["npm", "i"]
        subprocess.run(cmd, cwd=self.project_dir)

    def readme_content(self) -> str:
        return f"""
# {self.project_name}

## Scripts

```bash
# start the application
$ npm start

# run the tests (using native NodeJS test runner)
$ npm test

# perform linting (using Eslint) and type checking (using TSC)
$ npm run check

# format code (using prettier)
$ npm run fmt
```
		""".strip()

    def index_content(self) -> str:
        return """
/** @returns {Promise<void>} */
async function main() {
  console.log("Hello world")
}

main().catch(console.error)
		""".strip()

    def index_test_content(self) -> str:
        return """
import test from "node:test"
import assert from "node:assert/strict"

test("simple test", async () => {
  assert.equal(true, true)
})
		""".strip()

    def jsconfig_content(self) -> str:
        return """
{
  "compilerOptions": {
    "checkJs": true,
    "strict": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictPropertyInitialization": true,
    "alwaysStrict": true,
    "target": "ES2015",
    "moduleResolution": "node",
    "noImplicitOverride": false,
    "paths": {
      "#src/*": [
        "./src/*"
      ]
    }
  },
  "include": [
    "src"
  ],
  "exclude": [
    "node_modules",
    "**/node_modules/*"
  ]
}	
		""".strip()

    def package_json_content(self) -> str:
        return """ 
{
  "name": "sandbox",
  "version": "1.0.0",
  "main": "src/index.mjs",
  "license": "MIT",
  "type": "module",
  "scripts": {
    "start": "node ./src/index.mjs",
    "type-check": "tsc --project jsconfig.json",
    "test": "node --test",
    "lint": "npx eslint ./src/ --ext .mjs",
    "fmt": "npx prettier --write 'src/**/*.mjs'",
    "check": "npm run type-check && npm run lint"
  },
  "imports": {
    "#src/*": "./src/*"
  },
  "prettier": {
    "singleQuote": false,
    "semi": false,
    "tabWidth": 2,
    "trailingComma": "all"
  },
  "devDependencies": {
    "@types/node": "^22.13.10",
    "@types/punycode": "^2.1.4",
    "eslint": "^9.22.0",
    "eslint-plugin-jsdoc": "^50.6.8",
    "prettier": "^3.2.5",
    "typescript": "^5.8.2"
  }
}
	""".strip()

    def eslint_config_content(self) -> str:
        return """ 
import jsdoc from "eslint-plugin-jsdoc"

export default [
  {
    plugins: {
      jsdoc: jsdoc
    },
    rules: {
      "jsdoc/check-values": "error",
      "no-console": "warn",
      "quotes": [
        "warn",
        "double",
        {
          "allowTemplateLiterals": true,
          "avoidEscape": true
        }
      ],
      "semi": ["warn", "never"],
      "no-unused-vars": "warn"
    }
  }
]
	""".strip()


class PythonTemplate(BaseTemplate):
    """
    template class for Python projects.
    """

    def __init__(self, project_name: str) -> None:
        super().__init__(project_name)

        app_path = os.path.join("app", "app.py")
        app_test_path = os.path.join("app", "app_test.py")
        init_app_path = os.path.join("app", "__init__.py")

        self.files_and_content = {
            "README.md": self.readme_content(),
            app_path: self.app_content(),
            app_test_path: self.app_test_content(),
            init_app_path: self.init_app_content(),
            "main.py": self.main_content(),
            "pyproject.toml": self.pyproject_toml_content(),
        }

    @staticmethod
    def template_name() -> str:
        return "py"

    def gitignore_entries(self) -> list[str]:
      return [
        "__pycache__",
        "build",
        ".mypy_cache",
        "*.egg-info",
        ".DS_Store",
        ".vscode",
        ".venv",
      ]

    def project_directories(self) -> list[str]:
        return ["app"]        

    def readme_content(self) -> str:
        return f"""
# {self.project_name}
""".strip()

    def init_app_content(self) -> str:
      return """
from .app import main
      """.strip()

    def app_content(self) -> str:
        return """
def main() -> None:
    print("hello world")
        """.strip()

    def app_test_content(self) -> str:
      return """
from unittest import TestCase


class TestMain(TestCase):
    def test_main(self) -> None:
        self.assertTrue(True)
      """.strip()

    def main_content(self) -> str:
        return """
from app import main


if __name__ == "__main__":
    try:
        main()
    except Exception as ex:
        print("error: ", ex)
        """.strip()

    def pyproject_toml_content(self) -> str:
        return f"""
[project]
name = "{self.project_name}"
version = "1.0.0"
dependencies = []

[project.optional-dependencies]
dev = []
        """.strip()


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("-n", "--name", help="Project name", required=True)
    parser.add_argument("-t", "--template", help="Project template", required=True)
    args = parser.parse_args()

    registered_templates: list[BaseTemplate] = [
        GoTemplate(args.name),
        JsTemplate(args.name),
        PythonTemplate(args.name),
    ]

    found = False
    for template in registered_templates:
        if template.template_name() == args.template:
            found = True
            template.execute()
            break

    if not found:
        raise Exception(f"invalid template name: {args.template}")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("ctrl+c: exiting...")
    except Exception as e:
        print("error:", e)
