#!/usr/bin/python3

import sys
import os
import subprocess


def readme_content(project_name: str) -> str:
    return f"""
# {project_name}
A Typescript sandbox with following tools already setup
- Typescript for type-checking i.e. ```tsc```
- ```swc``` for code compilation
- ```eslint``` for static analysis and linting
- ```jest``` for testing
- Some basic ```package.json``` scripts

## Setup
```bash
$ npm i --save-dev
```

## Run in Development Mode
```bash
$ npm run dev
```

## Run in Production Mode
```bash
$ npm run build
$ npm run start
```
*Note*: The `NODE_ENV` environment variable will be set to `production` when running the app in production mode.

## Linting with ESLint
```bash
$ npm run lint
```

## Running Tests with Jest
```bash
$ npm run test
```
    """.strip()


def gitignore_content() -> str:
    return """
node_modules
build
.DS_Store
    """.strip()


def tsconfig_content() -> str:
    return """
{
  "compilerOptions": {
    "target": "es2020",
    "module": "es2020",
    "allowJs": true,
    "removeComments": true,
    "resolveJsonModule": true,
    "typeRoots": ["./node_modules/@types"],
    "sourceMap": true,
    "outDir": "dist",
    "strict": true,
    "lib": ["es2020"],
    "forceConsistentCasingInFileNames": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "moduleResolution": "Node",
    "skipLibCheck": true,
    "baseUrl": "./src",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/node_modules/**"]
}
    """.strip()


def swcrc_content() -> str:
    return """
{
  "jsc": {
    "parser": {
      "syntax": "typescript",
      "tsx": false,
      "decorators": true,
      "dynamicImport": true
    },
    "target": "es2020",
    "baseUrl": "./src",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "module": {
    "type": "commonjs"
  }
}
    """.strip()


def package_json_content(project_name: str) -> str:
    return r"""
{
  "name": "typescript-sandbox",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "dev": "nodemon --ext ts --exec 'npm run build && node build/src/index.js'",
    "build": "swc src --out-dir build",
    "start": "NODE_ENV=production node build/src/index.js",
    "type-check": "tsc --noEmit",
    "test": "jest",
    "fmt": "npx prettier --write ./src/",
    "lint": "npx eslint --fix ./src/ --ext .ts"
  },
  "jest": {
    "transform": {
      "^.+\\.(t|j)sx?$": "@swc/jest"
    },
    "testEnvironment": "node",
    "modulePathIgnorePatterns": [
      "<rootDir>/build/"
    ],
    "moduleNameMapper": {
      "@/(.*)": "<rootDir>/src/$1"
    }
  },
  "eslintConfig": {
    "root": true,
    "parser": "@typescript-eslint/parser",
    "plugins": [
      "@typescript-eslint"
    ],
    "extends": [
      "eslint:recommended",
      "plugin:@typescript-eslint/recommended"
    ],
    "rules": {
      "no-console": "warn",
      "quotes": [
        "warn",
        "double",
        {
          "allowTemplateLiterals": true,
          "avoidEscape": true
        }
      ],
      "semi": [
        "warn",
        "never"
      ],
      "no-unused-vars": "warn"
    }
  },
  "prettier": {
    "singleQuote": false,
    "semi": false,
    "tabWidth": 2,
    "trailingComma": "all"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "devDependencies": {
    "@swc/cli": "^0.3.12",
    "@swc/core": "^1.5.5",
    "@swc/jest": "^0.2.36",
    "@types/jest": "^29.5.12",
    "@types/node": "^20.12.11",
    "@typescript-eslint/eslint-plugin": "^7.8.0",
    "@typescript-eslint/parser": "^7.8.0",
    "eslint": "^8.56.0",
    "jest": "^29.7.0",
    "nodemon": "^3.1.0",
    "prettier": "^3.2.5",
    "typescript": "^5.4.5"
  }
}
    """.strip()


def index_content() -> str:
    return """
function main(): void {
  console.log("Hello world")
}

main()		
    """.strip()


def index_test_content() -> str:
    return """
test("test entry-point", () => {
  expect(true).toBeTruthy()
})  
    """.strip()


def create_directory_structure(root: str, project_name: str) -> None:
    os.mkdir(root)
    os.mkdir(os.path.join(root, "src"))

    with open(os.path.join(root, ".gitignore"), "wt") as f:
        f.write(gitignore_content())

    with open(os.path.join(root, "package.json"), "wt") as f:
        f.write(package_json_content(project_name))        

    with open(os.path.join(root, ".swcrc"), "wt") as f:
        f.write(swcrc_content())        

    with open(os.path.join(root, "README.md"), "wt") as f:
        f.write(readme_content(project_name))

    with open(os.path.join(root, "tsconfig.json"), "wt") as f:
        f.write(tsconfig_content())

    with open(os.path.join(root, "src", "index.ts"), "wt") as f:
        f.write(index_content())

    with open(os.path.join(root, "src", "index.test.ts"), "wt") as f:
        f.write(index_test_content())


def main(args: list[str]) -> None:
    if len(args) < 2:
        raise Exception("please provide a valid project name")

    project_name = args[1]
    root_path = os.path.join(os.getcwd(), project_name)

    print("Creating directory structure")
    create_directory_structure(root_path, project_name)

    init_git = input("\nInitialize a Git repo? [Y/n] ")
    if init_git == "Y" or init_git == "y":
        # message is automatically printed by git command
        subprocess.run(["git", "init", root_path])
    else:
        print("Skipping Git repository initialization")


if __name__ == "__main__":
    try:
        main(sys.argv)
    except KeyboardInterrupt:
        print("ctrl+c: exiting...")
    except Exception as err:
        print("error: ", err)
