#!/usr/bin/python3

import sys
import os
import subprocess


def readme_content(project_name: str) -> str:
    return f"""
#### {project_name}

##### Scripts

```bash
# start project in dev (watch / hot-reload) mode
$ npm run start:dev

# start project in production mode
# Note: Production build must be built before this will work
$ npm run start:prod

# generate production build artifacts
$ npm run build

# run all project tests
$ npm test

# run lint check on the codebase
$ npm run lint

# perform code formatting
$ npm run fmt
```
    """.strip()


def gitignore_content() -> str:
    return """
node_modules/
build/
tsconfig.tsbuildinfo
    """.strip()


def tsconfig_content() -> str:
    return """
{
  "compilerOptions": {
    "incremental": true,      
    "target": "es2016", 
    "lib": ["es6"],   
    "module": "commonjs",     
    "resolveJsonModule": true,  
    "allowJs": false, 
    "outDir": "build",
    "removeComments": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "noImplicitAny": true,                              
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "useUnknownInCatchVariables": true,               
    "alwaysStrict": true,                             
    "noUnusedLocals": true,                           
    "noUnusedParameters": true,                       
    "noImplicitReturns": true,                        
    "noFallthroughCasesInSwitch": true,               
    "noUncheckedIndexedAccess": true,                 
    "noImplicitOverride": true,
    "skipLibCheck": true,
    "rootDir": "src",   
    "baseUrl": "./src", 
    "paths": {
      "@/*": ["./*"]
    }      
  }
}    
    """.strip()


def eslintrc_content() -> str:
    return """
{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "prettier", "jest"],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "rules": {
    "no-console": 1,
    "prettier/prettier": 2
  },
  "env": {
    "browser": true,
    "node": true,
    "jest/globals": true
  }
}    
    """.strip()


def prettierrc_content() -> str:
    return """
{
  "trailingComma": "all",
  "singleQuote": false,
  "printWidth": 80,
  "semi": false,
  "tabWidth": 2
}    
    """.strip()


def package_json_content(project_name: str) -> str:
    return r"""
{
  "name": "project",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start:dev": "npx nodemon",
    "start:prod": "node ./build/index.js",
    "build": "npx tsc",
    "test": "npx jest",
    "lint": "eslint . --ext .ts",
    "fmt": "prettier --config .prettierrc 'src/**/*.ts' --write"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@types/jest": "^29.5.12",
    "@types/node": "^20.12.8",
    "@typescript-eslint/eslint-plugin": "^7.8.0",
    "@typescript-eslint/parser": "^7.8.0",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-jest": "^28.5.0",
    "eslint-plugin-prettier": "^5.1.3",
    "jest": "^29.7.0",
    "nodemon": "^3.1.0",
    "ts-jest": "^29.1.2",
    "ts-node": "^10.9.2",
    "typescript": "^5.4.5"
  }
}
    """.strip()


def jest_config_content() -> str:
    return r""" 
module.exports = {
  transform: {
    '^.+\\.ts?$': 'ts-jest',
  },
  "moduleNameMapper": {
    "@/(.*)": "<rootDir>/src/$1"
  },
  testEnvironment: 'node',
  testRegex: './src/.*\\.(test|spec)?\\.(ts|ts)$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
  roots: ['<rootDir>/src'],
}    
    """.strip()


def nodemon_json_content() -> str:
    return """ 
{
  "watch": ["src"],
  "ext": ".ts,.js",
  "ignore": [],
  "exec": "npx ts-node ./src/index.ts"
}    
    """.strip()


def index_content() -> str:
    return """
function main(): void {
  console.log("Hello world")
}

main()		
    """.strip()


def index_test_content() -> str:
    return """
test("test entry-point", () => {
  expect(true).toBeTruthy()
})  
    """.strip()


def create_directory_structure(root: str, project_name: str) -> None:
    os.mkdir(root)
    os.mkdir(os.path.join(root, "src"))

    with open(os.path.join(root, ".eslintrc"), "wt") as f:
        f.write(eslintrc_content())    

    with open(os.path.join(root, ".gitignore"), "wt") as f:
        f.write(gitignore_content())

    with open(os.path.join(root, ".prettierrc"), "wt") as f:
        f.write(prettierrc_content())

    with open(os.path.join(root, "jest.config.js"), "wt") as f:
        f.write(jest_config_content())        

    with open(os.path.join(root, "nodemon.json"), "wt") as f:
        f.write(nodemon_json_content())        

    with open(os.path.join(root, "package.json"), "wt") as f:
        f.write(package_json_content(project_name))        

    with open(os.path.join(root, "README.md"), "wt") as f:
        f.write(readme_content(project_name))

    with open(os.path.join(root, "tsconfig.json"), "wt") as f:
        f.write(tsconfig_content())

    with open(os.path.join(root, "src", "index.ts"), "wt") as f:
        f.write(index_content())

    with open(os.path.join(root, "src", "index.test.ts"), "wt") as f:
        f.write(index_test_content())


def main(args: list[str]) -> None:
    if len(args) < 2:
        raise Exception("please provide a valid project name")

    project_name = args[1]
    root_path = os.path.join(os.getcwd(), project_name)

    print("Creating directory structure")
    create_directory_structure(root_path, project_name)

    init_git = input("\nInitialize a Git repo? [Y/n] ")
    if init_git == "Y" or init_git == "y":
        # message is automatically printed by git command
        subprocess.run(["git", "init", root_path])
    else:
        print("Skipping Git repository initialization")


if __name__ == "__main__":
    try:
        main(sys.argv)
    except KeyboardInterrupt:
        print("ctrl+c: exiting...")
    except Exception as err:
        print("error: ", err)
