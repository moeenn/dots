#!/usr/bin/python3

import argparse
import os
import subprocess
import logging


def main_go_content() -> str:
    return """package main

import (
  "fmt"
)

func main() {
  fmt.Println("hello world")
}
"""


def gitignore_content() -> str:
    return """
bin
  """


def golangci_lint_content() -> str:
    return """
linters:
  enable:
    - exhaustive
    - exhaustruct
    - gosec
    - nilnil
    - nilerr
    - contextcheck
    # - err113
    - gochecknoinits
    # - godox
    - misspell
  """


def tools_script_content() -> str:
  return """
#! /bin/bash

declare -a tools=(
  "github.com/go-task/task/v3/cmd/task@latest"
  "github.com/nametake/golangci-lint-langserver@latest"
  "github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
)

for tool in ${tools[@]}; do
  eval "go install -v ${tools}"
done
  """


def task_file_yaml_content(project_name: str) -> str:
    return f"""
version: '3'

vars:
  MAIN: ./cmd/{project_name}/{project_name}.go

tasks:
  lint:
    cmds:
      - golangci-lint run ./...

  test:
    cmds:
      - go test ./...

  # usage: FILTER=^TestSomething\$ task test:filter
  "test:filter":
    cmds:
      - go test -run $FILTER -v ./...

  run:
    cmds:
      - task: lint
      - go run {{{{.MAIN}}}}

  build:
    cmds:
      - task: lint
      - task: test
      - go build -o ./bin/{project_name} {{{{.MAIN}}}}      
  """


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("-n", "--name", help="Project name", required=True)
    args = parser.parse_args()
    project_name = args.name
    logging.basicConfig(level=logging.INFO)

    project_dir = os.path.join(os.getcwd(), project_name)
    logging.info(f"creating directory {project_dir}")
    if os.path.exists(project_dir):
        raise Exception("Project directory already exists")
    else:
        os.mkdir(project_dir)

    # Run go mod init
    logging.info("initializing go module")
    cmd = ["go", "mod", "init", project_name]
    subprocess.run(cmd, cwd=project_dir)

    # create main.go directory
    main_dir = os.path.join(project_dir, "cmd", project_name)
    logging.info(f"creating directory {main_dir}")
    if os.path.exists(main_dir):
        raise Exception("Main directory already exists")
    else:
        os.makedirs(main_dir)

    # create main.go file
    main_file_path = os.path.join(main_dir, f"{project_name}.go")
    logging.info(f"creating {main_file_path}")
    if os.path.exists(main_file_path):
        raise Exception("main.go file already exists")
    else:
        with open(main_file_path, "w") as f:
            f.write(main_go_content())

    # create .gitignore file
    gitignore_file_path = os.path.join(project_dir, ".gitignore")
    logging.info(f"creating {gitignore_file_path}")
    if os.path.exists(gitignore_file_path):
        raise Exception(".gitignore file already exists")
    else:
        with open(gitignore_file_path, "w") as f:
            f.write(gitignore_content())

    # create Taskfile.yml file
    task_file_path = os.path.join(project_dir, "Taskfile.yml")
    logging.info(f"creating {task_file_path}")
    if os.path.exists(task_file_path):
        raise Exception("Taskfile.yml file already exists")
    else:
        with open(task_file_path, "w") as f:
            f.write(task_file_yaml_content(project_name))

    # create .golangci.yaml file
    golangci_file_path = os.path.join(project_dir, ".golangci.yml")
    logging.info(f"creating {golangci_file_path}")
    if os.path.exists(golangci_file_path):
        raise Exception(".golangci.yml file already exists")
    else:
        with open(golangci_file_path, "w") as f:
            f.write(golangci_lint_content())

    # create scripts directory
    scripts_dir = os.path.join(project_dir, "scripts")
    logging.info(f"creating directory {scripts_dir}")
    if os.path.exists(scripts_dir):
        raise Exception("Scripts directory already exists")
    else:
        os.makedirs(scripts_dir)

    # create tools installation script file
    tools_file_path = os.path.join(scripts_dir, "tools.sh")
    logging.info(f"creating {tools_file_path}")
    if os.path.exists(tools_file_path):
        raise Exception("tools.sh file already exists")
    else:
        with open(tools_file_path, "w") as f:
            f.write(tools_script_content())

    # make tools.sh executable
    logging.info("making tools.sh executable")
    subprocess.run(["chmod", "+x", "scripts/tools.sh"], cwd=project_dir)

    # init git repo
    logging.info("initializing git repo")
    cmd = ["git", "init"]
    subprocess.run(cmd, cwd=project_dir)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("ctrl+c: exiting...")
    except Exception as ex:
        print(f"error: {ex}")
