#!/usr/bin/python3

import sys
import os
import subprocess
import shutil


def get_jar_path() -> str:
    env_jar_path = os.environ.get("JAR_PATH")
    if env_jar_path is None:
        raise Exception("environment variable JAR_PATH is not set.")

    # ensure jar_path directory exists.
    if not os.path.exists(env_jar_path):
        try:
            os.makedirs(env_jar_path)
        except Exception as ex:
            raise Exception("failed to create JAR_PATH directory: " + str(ex))

    if not os.path.isdir(env_jar_path):
        raise Exception(
            "environment variable JAR_PATH refers to a file instead of a directory."
        )

    return env_jar_path


def print_usage(script_name: str) -> None:
    usage = f"""
Usage: {script_name} <command> [command-args]

Commands
    run:     Name of the jar to run (from JAR_PATH directory).
             e.g. {script_name} run <jar-name>
    
    install: Install a jar to the JAR_PATH directory.
             e.g. {script_name} install <jar-file> <install-name>
    """

    print(usage.strip(), end="\n\n")


def run_jar(jar_path: str, jar_name: str, args: list[str]) -> None:
    full_path = os.path.join(jar_path, jar_name + ".jar")
    if not os.path.exists(full_path):
        raise Exception(f"jar not found: {jar_name}")

    try:
        subprocess.run(["java", "-jar", full_path] + args, cwd=os.getcwd())
    except Exception as ex:
        raise Exception("failed to run jar: " + str(ex))


def install_jar(jar_path: str, jar_file_path: str, install_name: str) -> None:
    if not os.path.exists(jar_file_path):
        raise Exception(f"file does not exist: {jar_file_path}.")

    if not jar_file_path.endswith(".jar"):
        raise Exception("please provide a valid jar file for installation.")

    if not install_name.endswith(".jar"):
        install_name = install_name + ".jar"

    install_path = os.path.join(jar_path, install_name)
    try:
        shutil.copyfile(jar_file_path, install_path)
    except Exception as ex:
        raise Exception("failed to copy jar to JAR_PATH: " + str(ex))


def main(args: list[str]) -> None:
    script_name = args[0]
    jar_path = get_jar_path()

    if len(args) < 2:
        print_usage(script_name)
        sys.exit(1)

    command = args[1]
    match command:
        case "run":
            if len(args) < 3:
                raise Exception("please provide name of the jar to run.")

            jar_name = args[2]
            run_args = []
            if len(args) >= 4:
                run_args = args[3:]

            run_jar(jar_path, jar_name, run_args)

        case "install":
            if len(args) < 4:
                raise Exception("please provide path to jar file and install name.")

            jar_file_path = args[2]
            install_name = args[3]
            install_jar(jar_path, jar_file_path, install_name)

        case _:
            raise Exception("invalid command: " + command)


if __name__ == "__main__":
    args = sys.argv[:]
    try:
        main(args)
    except KeyboardInterrupt:
        print("\nShutting down...")
    except Exception as ex:
        print("error:", ex)
