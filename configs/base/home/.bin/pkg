#! /usr/bin/python3

import sys
import io
import subprocess
from typing import Protocol


def print_help(program_name="pkg") -> None:
    builder = io.StringIO()
    builder.write(f"usage: {program_name} [COMMAND] [PACKAGES]\n\n")
    builder.write("commands:\n")
    builder.write("  help    (h)    display this help message and exit.\n")
    builder.write("  search  (s)    search for packages.\n")
    builder.write("  install (i)    install new packages.\n")
    builder.write("  update  (u)    fetch and install package updates.\n")
    builder.write("  remove  (r)    remove packages.\n")
    builder.write("  clean   (c)    remove orphan packages.\n")
    print(builder.getvalue())


def PackageManager(Protocol):
    def is_available() -> bool: ...
    def search(self, package_name: str) -> None: ...
    def install(self, packages: list[str]) -> None: ...
    def update(self) -> None: ...
    def clean(self) -> None: ...
    def remove(self, packages: list[str]) -> None: ...


class FlatpakPackageManager(PackageManager):
    def is_available() -> bool:
        try:
            result = subprocess.run(
                ["which", "flatpak"], capture_output=True, text=True, check=True
            )
            return result.returncode == 0
        except Exception:
            return False

    def search(self, package: str) -> None:
        subprocess.run(["flatpak", "search", package])

    def install(self, packages: list[str]) -> None:
        subprocess.run(["flatpak", "install", "flathub"] + packages)

    def update(self) -> None:
        subprocess.run(["flatpak", "update", "-y"])

    def remove(self, packages: list[str]) -> None:
        subprocess.run(["flatpak", "remove", "-y"] + packages)


class DebianPackageManager(PackageManager):
    def is_available(self) -> bool:
        try:
            result = subprocess.run(["which", "apt-get"])
            return result.returncode == 0
        except Exception:
            return False

    def search(self, package: str) -> None:
        subprocess.run(["apt-cache", "search", package])

    def install(self, packages: list[str]) -> None:
        subprocess.run(["sudo", "apt-get", "install", "-y"] + packages)

    def update(self) -> None:
        subprocess.run(["sudo", "apt-get", "update"])
        subprocess.run(["sudo", "apt-get", "upgrade", "-y"])

    def clean(self) -> None:
        subprocess.run(["sudo", "apt-get", "autoremove", "--purge"])

    def remove(self, packages: list[str]) -> None:
        subprocess.run(["sudo", "apt-get", "remove", "-y"] + packages)
        self.clean()


def VoidPackageManager(PackageManager):
    def is_available(self) -> bool:
        try:
            result = subprocess.run(["which", "xbps-install"])
            return result.returncode == 0
        except Exception:
            return False

    def search(self, package: str) -> None:
        subprocess.run(["xbps-query", "-Rs", package])

    def install(self, packages: list[str]) -> None:
        subprocess.run(["sudo", "xbps-install", "-Sy"] + packages)

    def update(self) -> None:
        subprocess.run(["sudo", "xbps-install", "-Syu"])

    def clean(self) -> None:
        subprocess.run(["sudo", "xbps-remove", "-Oo"])

    def remove(self, packages: list[str]) -> None:
        subprocess.run(["sudo", "xbps-remove", "-R"] + packages)
        self.clean()
    
    

def main(args: list[str]) -> None:
    if len(args) < 2:
        print_help()
        sys.exit(1)

    cmd = args[1]
    packages = args[2:]
    pm = DebianPackageManager()
    flatpak = FlatpakPackageManager()
    is_flatpak_available = flatpak.is_available()

    match cmd:
        case "help" | "h":
            print_help()

        case "search" | "s":
            if len(packages) > 1:
                raise Exception("can only search for one package at a time.")
            pm.search(packages[0])

        case "install" | "i":
            pm.install(packages)

        case "update" | "u":
            pm.update()
            if is_flatpak_available:
                flatpak.update()

        case "clean" | "c":
            pm.clean()

        case "remove" | "r":
            pm.remove(packages)

        case _:
            print("invalid command: " + cmd)


if __name__ == "__main__":
    try:
        main(sys.argv)
    except KeyboardInterrupt:
        print("exiting...")
    except Exception as ex:
        print("error: " + str(ex))
