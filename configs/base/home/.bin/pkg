#! /usr/bin/python3

import sys
import io
import subprocess
from typing import Protocol


def print_help(program_name="pkg") -> None:
    builder = io.StringIO()
    builder.write(f"usage: {program_name} [COMMAND] [PACKAGES]\n\n")
    builder.write("commands:\n")
    builder.write("  help    (h)    display this help message and exit.\n")
    builder.write("  search  (s)    search for packages.\n")
    builder.write("  install (i)    install new packages.\n")
    builder.write("  update  (u)    fetch and install package updates.\n")
    builder.write("  remove  (r)    remove packages.\n")
    builder.write("  clean   (c)    remove orphan packages.\n")
    print(builder.getvalue())


def is_pm_available(command: str) -> bool:
    try:
        result = subprocess.run(["which", command], capture_output=True)
        return result.returncode == 0
    except Exception:
        return False


class Colors:
    Blue = "\033[94m"
    Red = "\033[93m"
    Reset = "\033[0m"


class PackageManager(Protocol):
    def is_available(self) -> bool: ...
    def get_name(self) -> str: ...
    def search(self, package: str) -> None: ...
    def install(self, packages: list[str]) -> None: ...
    def update(self) -> None: ...
    def clean(self) -> None: ...
    def remove(self, packages: list[str]) -> None: ...


class FlatpakPackageManager(PackageManager):
    def get_name(self) -> str:
        return "Flatpak"

    def is_available(self) -> bool:
        return is_pm_available(command="flatpak")

    def search(self, package: str) -> None:
        subprocess.run(["flatpak", "search", package])

    def install(self, packages: list[str]) -> None:
        subprocess.run(["flatpak", "install", "flathub"] + packages)

    def update(self) -> None:
        subprocess.run(["flatpak", "update", "-y"])

    def clean(self) -> None:
        subprocess.run(["flatpak", "uninstall", "--unused"])

    def remove(self, packages: list[str]) -> None:
        subprocess.run(["flatpak", "remove", "-y"] + packages)
        self.clean()


class DebianPackageManager(PackageManager):
    def get_name(self) -> str:
        return "Apt"

    def is_available(self) -> bool:
        return is_pm_available(command="apt-get")

    def search(self, package: str) -> None:
        subprocess.run(["apt-cache", "search", package])

    def install(self, packages: list[str]) -> None:
        subprocess.run(["sudo", "apt-get", "install", "-y"] + packages)

    def update(self) -> None:
        subprocess.run(["sudo", "apt-get", "update"])
        subprocess.run(["sudo", "apt-get", "upgrade", "-y"])

    def clean(self) -> None:
        subprocess.run(["sudo", "apt-get", "autoremove", "--purge"])

    def remove(self, packages: list[str]) -> None:
        subprocess.run(["sudo", "apt-get", "remove", "-y"] + packages)
        self.clean()


class VoidPackageManager(PackageManager):
    def get_name(self) -> str:
        return "Xbps"

    def is_available(self) -> bool:
        return is_pm_available(command="xbps-install")

    def search(self, package: str) -> None:
        subprocess.run(["xbps-query", "-Rs", package])

    def install(self, packages: list[str]) -> None:
        subprocess.run(["sudo", "xbps-install", "-Sy"] + packages)

    def update(self) -> None:
        subprocess.run(["sudo", "xbps-install", "-Syu"])

    def clean(self) -> None:
        subprocess.run(["sudo", "xbps-remove", "-Oo"])

    def remove(self, packages: list[str]) -> None:
        subprocess.run(["sudo", "xbps-remove", "-R"] + packages)
        self.clean()


class PackageManagerFactor(PackageManager):
    available_pms: list[PackageManager]

    def __init__(self, packageManagers: list[PackageManager]) -> None:
        self.available_pms = []
        for pm in packageManagers:
            if pm.is_available():
                self.available_pms.append(pm)

        if len(self.available_pms) == 0:
            raise Exception("no supported package manager found.")

    def is_available(self) -> bool:
        return True

    def get_name(self) -> str:
        return "PackageManagerFactory"

    def install(self, packages: list[str]) -> None:
        for pm in self.available_pms:
            print(f"\n{Colors.Blue}Installing ({pm.get_name()}): {Colors.Reset}")
            pm.install(packages)

    def search(self, package: str) -> None:
        for pm in self.available_pms:
            print(f"\n{Colors.Blue}Searching ({pm.get_name()}): {Colors.Reset}")
            pm.search(package)

    def update(self) -> None:
        for pm in self.available_pms:
            print(f"\n{Colors.Blue}Updateing ({pm.get_name()}): {Colors.Reset}")
            pm.update()

    def remove(self, packages: list[str]) -> None:
        for pm in self.available_pms:
            print(f"\n{Colors.Blue}Removing ({pm.get_name()}): {Colors.Reset}")
            pm.remove(packages)
            pm.clean()

    def clean(self) -> None:
        for pm in self.available_pms:
            print(f"\n{Colors.Blue}Cleaning ({pm.get_name()}): {Colors.Reset}")
            pm.clean()


def main(args: list[str]) -> None:
    if len(args) < 2:
        print_help()
        sys.exit(1)

    cmd = args[1]
    packages = args[2:]

    pm_factory = PackageManagerFactor(
        packageManagers=[
            DebianPackageManager(),
            VoidPackageManager(),
            FlatpakPackageManager(),
        ]
    )

    match cmd:
        case "help" | "h":
            print_help()

        case "search" | "s":
            if len(packages) > 1:
                raise Exception("can only search for one package at a time.")
            pm_factory.search(packages[0])

        case "install" | "i":
            pm_factory.install(packages)

        case "update" | "u":
            pm_factory.update()

        case "clean" | "c":
            pm_factory.clean()

        case "remove" | "r":
            pm_factory.remove(packages)

        case _:
            raise Exception(f"invalid command: {cmd}")


if __name__ == "__main__":
    try:
        main(sys.argv)
    except KeyboardInterrupt:
        print("exiting...")
    except Exception as ex:
        print(f"{Colors.Red}error: {str(ex)}")
