#! /usr/bin/python3

from enum import Enum, auto
import sys
import io
import subprocess


def print_help(program_name="pkg") -> None:
    builder = io.StringIO()
    builder.write(f"usage: {program_name} [COMMAND] [PACKAGES]\n\n")
    builder.write("commands:\n")
    builder.write("  help        display this help message and exit.\n")
    builder.write("  search      search for packages.\n")
    builder.write("  install     install new packages.\n")
    builder.write("  update      fetch and install package updates.\n")
    builder.write("  remove      remove packages.\n")
    print(builder.getvalue())


class FlatpakPackageManager:
    @staticmethod
    def is_available() -> bool:
        result = subprocess.run(
            ["which", "flatpak"], capture_output=True, text=True, check=True
        )
        return result.returncode == 0

    def search(self, package: str) -> None:
        subprocess.run(["flatpak", "search", package])

    def install(self, packages: list[str]) -> None:
        subprocess.run(["flatpak", "install", "flathub"] + packages)

    def update(self) -> None:
        subprocess.run(["flatpak", "update", "-y"])

    def remove(self, packages: list[str]) -> None:
        subprocess.run(["flatpak", "remove", "-y"] + packages)


class DebianPackageManager:
    def search(self, package: str) -> None:
        subprocess.run(["apt-cache", "search", package])

    def install(self, packages: list[str]) -> None:
        subprocess.run(["sudo", "apt-get", "install", "-y"] + packages)

    def update(self) -> None:
        subprocess.run(["sudo", "apt-get", "update"])
        subprocess.run(["sudo", "apt-get", "upgrade", "-y"])

    def remove(self, packages: list[str]) -> None:
        subprocess.run(["sudo", "apt-get", "remove", "-y"] + packages)
        subprocess.run(["sudo", "apt-get", "autoremove", "--purge"])


class Command(Enum):
    search = auto()
    install = auto()
    update = auto()
    remove = auto()
    help = auto()

    @staticmethod
    def from_string(raw: str):
        try:
            return Command[raw]
        except Exception:
            raise Exception(f"invalid command: {raw}")


def main(args: list[str]) -> None:
    if len(args) < 2:
        print_help()
        sys.exit(1)

    raw_cmd = args[1]
    parsed_cmd = Command.from_string(raw_cmd)

    packages = args[2:]
    pm = DebianPackageManager()

    match parsed_cmd:
        case Command.help:
            print_help()

        case Command.search:
            if len(packages) > 1:
                raise Exception("can only search for one package at a time.")
            pm.search(packages[0])

        case Command.install:
            pm.install(packages)

        case Command.update:
            pm.update()

        case Command.remove:
            pm.remove(packages)


if __name__ == "__main__":
    try:
        main(sys.argv)
    except KeyboardInterrupt:
        print("exiting...")
    except Exception as ex:
        print("error: " + str(ex))
