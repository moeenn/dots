#!/usr/bin/python3

import os
import sys
import subprocess


def cmakelists_content(project_name: str) -> str:
    return f""" 
cmake_minimum_required (VERSION 3.5)

set (PROJECT_NAME "{project_name}")
project (${{PROJECT_NAME}})
set (CMAKE_CXX_STANDARD 20)
set (CMAKE_BUILD_TYPE Debug) # 'Release' for prod output

# Create symlink to compile_commands.json at project root for IDE to pick it up
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)
if (PROJECT_IS_TOP_LEVEL AND UNIX)
    execute_process(
        COMMAND ${{CMAKE_COMMAND}} -E create_symlink
            ${{CMAKE_BINARY_DIR}}/compile_commands.json
            ${{CMAKE_CURRENT_SOURCE_DIR}}/compile_commands.json
    )
endif()

# auto-detect source files in directory
file (GLOB_RECURSE SRC_FILES "${{PROJECT_SOURCE_DIR}}/src/*.cpp")
add_executable (${{PROJECT_NAME}} ${{SRC_FILES}})

target_compile_options(${{PROJECT_NAME}} PUBLIC -Wextra -Werror -Wall -Wpedantic -O3)
target_link_libraries (${{PROJECT_NAME}} m) # m means -lm i.e. math library
"""


def main_src_content() -> str:
    return """
#include <iostream>

int main() {
    std::cout << "Hello world\\n";
}        
    """.strip()


def gitignore_content() -> str:
    return """
.cache
compile_commands.json
build/*
.DS_Store    
    """


def readme_content(project_name: str) -> str:
    return f"""
## {project_name}

#### Create debug build

```bash
$ cmake -S . -B build
$ make -C ./build 
$ ./build/{project_name}
```

#### Create release build

```bash
$ cmake -S . -B build -D CMAKE_BUILD_TYPE=Release
$ make -C ./build 
$ ./build/{project_name}
```        
    """


def create_file_with_content(path: str, filename: str, content: str) -> None:
    if not os.path.exists(path):
        os.makedirs(path)

    filepath = os.path.join(path, filename)
    with open(filepath, "wt") as file:
        file.write(content.strip())


def main(args: list[str]) -> None:
    project_name = args[0] if len(args) >= 1 else "sandbox"
    current_dir = os.getcwd()
    project_path = os.path.join(current_dir, project_name)
    if os.path.exists(project_name):
        raise Exception("Folder already exists: " + project_path)

    os.mkdir(project_path)
    create_file_with_content(project_path, "README.md", readme_content(project_name))
    create_file_with_content(
        project_path, "CMakeLists.txt", cmakelists_content(project_name)
    )
    create_file_with_content(project_path, ".gitignore", gitignore_content())
    create_file_with_content(
        os.path.join(project_path, "src"), "main.cpp", main_src_content()
    )

    subprocess.call(["git", "init", project_path])


if __name__ == "__main__":
    try:
        args = sys.argv[1:]
        main(args)
    except Exception as ex:
        print("Error: " + str(ex))
    except KeyboardInterrupt:
        print("ctrl+c: exiting")
