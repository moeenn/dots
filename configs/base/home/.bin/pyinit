#!/usr/bin/python3

import sys
import os
import subprocess


def readme_content(project_name: str) -> str:
    return f"""
## {project_name}

### Setup

```bash
# create a new virutual environment
$ python -m venv .venv

# activate the environment
$ source .venv/bin/activate

# install project dependencies
$ pip install .
```


### Usage

```bash
# start the project
$ invoke start

# run tests
$ invoke test

# format and lint code
$ invoke fmt 
$ invoke lint

# compile to stand-alone executable
$ invoke build

# perform temporary files cleanup
$ invoke clean
```        
    """.strip()


def gitignore_content() -> str:
    return """
.venv
*.pyc
__pycache__
.vscode
build/
*.egg-info
.*_cache
dist/
.DS_Store    
    """.strip()


def requirements_txt_content() -> str:
    return """
invoke==2.2.0
ruff==0.3.4
pyinstaller==6.5.0        
    """.strip()


def tasks_file_content() -> str:
    return """
from invoke import task
import os


PI = "python"
PIP = "pip"
ROOT = os.getcwd()
APP = os.path.join(ROOT, "app")
MAIN = os.path.join(ROOT, "main.py")
BUILD_DIR = os.path.join(ROOT, "build")


# Project task commands: Tasks can be executed using command `invoke <task-name>`
# Example: invoke dev  


@task
def start(c, docs=False) -> None:
    c.run(f"{PI} {MAIN}")


@task
def test(c, docs=False) -> None:
    c.run(f"{PI} -m unittest discover -s {APP} -p '*_test.py'")


@task
def fmt(c, docs=False) -> None:
    c.run(f"{PI} -m ruff format {APP}")


@task
def check(c, docs=False) -> None:
    c.run(f"{PI} -m ruff check {APP}")


@task
def build(c, docs=False) -> None:
    c.run(f"pyinstaller --onefile --specpath={BUILD_DIR} {MAIN}")
    

@task 
def clean(c, docs=False) -> None:
    # recursively remove __pycache__ directories from project
    print("Removing cache files...")
    c.run("find . -type d -name  '__pycache__' -exec rm -r {} +")

    dist_dir = os.path.join(os.getcwd(), "dist")        
    if os.path.exists(dist_dir):
        c.run(f"rm -rf {dist_dir}")

    if os.path.exists(BUILD_DIR):
        c.run(f"rm -r {BUILD_DIR}")
    
    """.strip()


def main_content() -> str:
    return """
from app.app import Application


def main() -> None:
    app = Application()
    app.run()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("ctrl+c: shutting down...")
    except Exception as err:
        print("error: ", err)
		
    """.strip()


def app_content() -> str:
    return """
class Application:
    def run(self):
        print("Hello world from application")

    def random_number(self) -> int:
        return 42    
    """.strip()


def app_test_content() -> str:
    return """
from unittest import TestCase
from app import Application


class TestApp(TestCase):
    app = Application()

    def test_random_number(self) -> None:
        result = self.app.random_number()
        self.assertEqual(result, 42)    
    """.strip()


def create_directory_structure(root: str, project_name: str) -> None:
    os.mkdir(root)
    os.mkdir(os.path.join(root, "app"))

    with open(os.path.join(root, ".gitignore"), "wt") as f:
        f.write(gitignore_content())

    with open(os.path.join(root, "README.md"), "wt") as f:
        f.write(readme_content(project_name))

    with open(os.path.join(root, "requirements.txt"), "wt") as f:
        f.write(requirements_txt_content())

    with open(os.path.join(root, "tasks.py"), "wt") as f:
        f.write(tasks_file_content())

    with open(os.path.join(root, "main.py"), "wt") as f:
        f.write(main_content())

    with open(os.path.join(root, "app", "__init__.py"), "wt") as f:
        f.write("")

    with open(os.path.join(root, "app", "app.py"), "wt") as f:
        f.write(app_content())

    with open(os.path.join(root, "app", "app_test.py"), "wt") as f:
        f.write(app_test_content())


def main(args: list[str]) -> None:
    if len(args) < 2:
        raise Exception("please provide a valid project name")

    project_name = args[1]
    root_path = os.path.join(os.getcwd(), project_name)

    print("Creating directory structure")
    create_directory_structure(root_path, project_name)

    init_git = input("\nInitialize a Git repo? [Y/n] ")
    if init_git == "Y" or init_git == "y":
        # message is automatically printed by git command
        subprocess.run(["git", "init", root_path])
    else:
        print("Skipping Git repository initialization")

    init_venv = input("\nInitialize virtual environment (venv)? [Y/n] ")
    if init_venv == "Y" or init_venv == "y":
        subprocess.run(["python3", "-m", "venv", os.path.join(root_path, ".venv")])
        print("Virtual environment initialized")
    else:
        print("Skipping virtual environment initialization")


if __name__ == "__main__":
    try:
        main(sys.argv)
    except KeyboardInterrupt:
        print("ctrl+c: exiting...")
    except Exception as err:
        print("error: ", err)
